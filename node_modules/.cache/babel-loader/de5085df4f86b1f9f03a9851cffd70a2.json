{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\BEB-06-PrivateSea\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Routes, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Nav from \"./Nav\";\nimport axios from \"axios\";\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //get 요청을 한다.\n  //값을 받아온다. => url\n  const [searchValue, setSearchValue] = useState(undefined);\n  const [nftUrl, setNftUrl] = useState(\"\");\n  const [web3, setWeb3] = useState();\n\n  //search\n  async function handleSearch(e) {\n    setSearchValue(e.target.value);\n    await axios.get(`http://localhost:8080/nft/${searchValue}`).then(result => {\n      //axios({method:get , url:'/nft/${search}'})\n      console.log(result.data);\n    });\n  }\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      // window.ethereum이 있다면\n      try {\n        const web = new Web3(window.ethereum); // 새로운 web3 객체를 만든다\n        setWeb3(web);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    getUrl();\n  }, []);\n\n  //처음에 main 에 뿌려주는 Nft list 를 db에 초기값 셋팅하기 위함\n  async function getUrl() {\n    await axios.post(\"http://localhost:8080/\", {\n      data: {\n        url: \"https://pin.it/1MaWAk8\"\n      }\n    }, {\n      withCredentials: true\n    }).then(result => {\n      setNftUrl(result.data);\n      console.log(nftUrl);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Nav, {\n      value: searchValue,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wkWzh8/juEdv6grv6WBVx1j3+8U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Routes","BrowserRouter","Router","Route","Nav","axios","Web3","App","searchValue","setSearchValue","undefined","nftUrl","setNftUrl","web3","setWeb3","handleSearch","e","target","value","get","then","result","console","log","data","window","ethereum","web","err","getUrl","post","url","withCredentials"],"sources":["C:/project/BEB-06-PrivateSea/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Routes, BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Nav from \"./Nav\";\r\nimport axios from \"axios\";\r\nimport Web3 from 'web3';\r\n\r\nfunction App() {\r\n  //get 요청을 한다.\r\n  //값을 받아온다. => url\r\n  const [searchValue, setSearchValue] = useState(undefined);\r\n  const [nftUrl, setNftUrl] = useState(\"\");\r\n  const [web3, setWeb3] = useState();\r\n\r\n  //search\r\n  async function handleSearch(e) {\r\n    setSearchValue(e.target.value);\r\n    await axios\r\n      .get(`http://localhost:8080/nft/${searchValue}`)\r\n      .then((result) => {\r\n        //axios({method:get , url:'/nft/${search}'})\r\n        console.log(result.data);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (typeof window.ethereum !== \"undefined\") { // window.ethereum이 있다면\r\n      try {\r\n          const web = new Web3(window.ethereum);  // 새로운 web3 객체를 만든다\r\n          setWeb3(web);\r\n      } catch (err) {\r\n          console.log(err);\r\n      }\r\n    }\r\n    getUrl();\r\n  }, []);\r\n\r\n  //처음에 main 에 뿌려주는 Nft list 를 db에 초기값 셋팅하기 위함\r\n  async function getUrl() {\r\n    await axios\r\n      .post(\r\n        \"http://localhost:8080/\",\r\n        { data: { url: \"https://pin.it/1MaWAk8\" } },\r\n        { withCredentials: true }\r\n      )\r\n      .then((result) => {\r\n        setNftUrl(result.data);\r\n        console.log(nftUrl);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Nav value={searchValue} onChange={handleSearch} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,aAAa,IAAIC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAO,WAAW;AAClB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAAC;AAExB,SAASC,GAAG,GAAG;EAAA;EACb;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAACW,SAAS,CAAC;EACzD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,EAAE;;EAElC;EACA,eAAegB,YAAY,CAACC,CAAC,EAAE;IAC7BP,cAAc,CAACO,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC9B,MAAMb,KAAK,CACRc,GAAG,CAAE,6BAA4BX,WAAY,EAAC,CAAC,CAC/CY,IAAI,CAAEC,MAAM,IAAK;MAChB;MACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,IAAI,CAAC;IAC1B,CAAC,CAAC;EACN;EAEA1B,SAAS,CAAC,MAAM;IACd,IAAI,OAAO2B,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAAE;MAC5C,IAAI;QACA,MAAMC,GAAG,GAAG,IAAIrB,IAAI,CAACmB,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAE;QACxCZ,OAAO,CAACa,GAAG,CAAC;MAChB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVN,OAAO,CAACC,GAAG,CAACK,GAAG,CAAC;MACpB;IACF;IACAC,MAAM,EAAE;EACV,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,eAAeA,MAAM,GAAG;IACtB,MAAMxB,KAAK,CACRyB,IAAI,CACH,wBAAwB,EACxB;MAAEN,IAAI,EAAE;QAAEO,GAAG,EAAE;MAAyB;IAAE,CAAC,EAC3C;MAAEC,eAAe,EAAE;IAAK,CAAC,CAC1B,CACAZ,IAAI,CAAEC,MAAM,IAAK;MAChBT,SAAS,CAACS,MAAM,CAACG,IAAI,CAAC;MACtBF,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;IACrB,CAAC,CAAC;EACN;EAEA,oBACE;IAAA,uBACE,QAAC,GAAG;MAAC,KAAK,EAAEH,WAAY;MAAC,QAAQ,EAAEO;IAAa;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC/C;AAEV;AAAC,GAjDQR,GAAG;AAAA,KAAHA,GAAG;AAmDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}